#include <iostream>
using namespace std;

//El algoritmo lineal recorre un arreglo y cada que llega a una posicion divisible entre 6 se cuenta una columna y asi cuando encuentra un 0 devuelve el numero de columna en la que esta el edificio mas alto.

int tallestbuilding(int building[])//Lineal
{
    int col = 0;
    for (int n=0; n<(5*6); n++)
    {
        if(building[n] == 0)
            {return col;}
        if(n%6==0)
            {col = 0;} 
        col++;
    }
    return -1;
}

//El algotirmo evalua cada uno de los elementos de la matriz, el caso base es de la linea 25 a la 28, los dos if siguientes actualizan la busqueda en columnas y filas y aplican recursividad.

int tallestbuilding_2(int building_2[5][6], int Row, int Col, int col = 0, int row = 0)
{
    //Caso Base
    if (building_2[row][col] == 0)
        return col;
    else if (Row < col or Col < row)
        return -1;
    //Recursividad
    if (col == Col-1)
        return tallestbuilding_2(building_2, Row, Col, 0, row += 1);
    if (building_2[row][col] != 0)
        return tallestbuilding_2(building_2, Row, Col, col += 1, row);
    return -1;
}

//Este algotirmo utiliza busqueda binaria ya que empieza buscando en la mitad de la matriz, si encuentra 0 se va hacia arriba sino hacia abajo uy actualiza la nueva mitad de la matriz.

int tallestbuilding_3(int building_2[5][6], int row, int col, int start = 0,  int end = 0)//Logaritmico
{
    //Caso base
    int nextColumn, returnColumn;
    if(end == 0)
        end = 5;
    //Recursividad
    int midle = (start + end)/2;
    bool inRow = false;
    for(int i=0; i < col; i++)
    {
        if(building_2[midle][i] == 0)
        {
            inRow = true;
            if(midle == 0)
            {
                return i;
            }
            nextColumn = tallestbuilding_3(building_2, row, col, start, midle);
            if(nextColumn < 0)
            {
                returnColumn = i;
            }
            else
                returnColumn = nextColumn;
            break;
        }
    }
    if(!inRow && ((midle + end)/2) == midle)
    {
        return -1;
    }
    if(inRow)
    {
        return returnColumn;
    }
    return tallestbuilding_3(building_2, row, col, midle, end);
}

int main()
{
    int building[] = {1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1};
    int building_2[5][6] = {
        {1, 1, 1, 0, 1, 1},
        {1, 1, 0, 0, 0, 1},
        {0, 1, 0, 0, 0, 1},
        {0, 1, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 1}};
    cout << tallestbuilding(building) << endl;
    cout << tallestbuilding_2(building_2, 6, 5) << endl;
    cout << tallestbuilding_3(building_2, 6, 5, 0, 0) << endl;
    return 0;
}
